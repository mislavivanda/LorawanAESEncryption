#include <Arduino.h>
#include <aes.h>
#define triggerPin 5
#define buttonPin 2
#define payloadTextNumber 30
uint_8t AppSKey[N_BLOCK] = {0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x31, 0x35, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x31, 0x35};
// PUT YOUR PAYLOAD BYTES HERE
uint_8t payloadText[][N_BLOCK] = {
    {0xed, 0xc5, 0x51, 0x5e, 0x8c, 0x85, 0x85, 0x1e,
     0x92, 0x88, 0x9f, 0xea, 0x92, 0x17, 0x98, 0xe3},
    {0xd5, 0x83, 0x3c, 0x34, 0x87, 0x3c, 0x91, 0x32,
     0x71, 0x69, 0x82, 0x3f, 0x7c, 0x30, 0xd5, 0xc5},
    {0x11, 0xec, 0x48, 0x8f, 0x72, 0x2f, 0xb9, 0x5a,
     0xc1, 0xa9, 0x1c, 0x32, 0x91, 0x2e, 0xb0, 0xd4},
    {0xd, 0x9, 0xfe, 0x1a, 0x21, 0xdb, 0xf6, 0x64,
     0xb4, 0x5b, 0x2b, 0x6a, 0x94, 0x35, 0x5e, 0x8b},
    {0xbc, 0x25, 0x8e, 0x57, 0x77, 0x43, 0x26, 0x0,
     0xa4, 0xb5, 0xc, 0x5, 0x1a, 0x6d, 0xa6, 0xb1},
    {0x6c, 0x58, 0xb9, 0x32, 0x6a, 0x7f, 0x46, 0xb8,
     0xff, 0x9c, 0x8b, 0x16, 0x6b, 0x4a, 0x35, 0xd6},
    {0x24, 0xcb, 0x69, 0x33, 0xbc, 0x69, 0x25, 0xd0,
     0xe8, 0xf7, 0x44, 0x25, 0x82, 0x82, 0xcc, 0x24},
    {0xc7, 0x3f, 0x1f, 0xd1, 0x1e, 0x1b, 0xfc, 0x5a,
     0xc4, 0x86, 0x52, 0xb3, 0x1f, 0xc7, 0xa9, 0xf6},
    {0x24, 0x5c, 0xfa, 0x70, 0x66, 0xbf, 0x3f, 0xea,
     0xdb, 0x37, 0xb1, 0xa8, 0xe6, 0xc5, 0x5d, 0x16},
    {0xe5, 0xd0, 0x73, 0xdc, 0xbf, 0x5d, 0x5, 0x92,
     0xe1, 0x69, 0x37, 0xf8, 0x0, 0x4d, 0x71, 0x93},
    {0xb8, 0xea, 0x26, 0xaa, 0x3, 0x26, 0xd4, 0x50,
     0x2f, 0xfd, 0x9d, 0x52, 0xe6, 0xdb, 0xbc, 0x7},
    {0x2f, 0x5d, 0x37, 0xa6, 0x85, 0xc0, 0xab, 0xaa,
     0xea, 0x6d, 0x28, 0xa8, 0x89, 0x3a, 0x2d, 0xd4},
    {0x2, 0x15, 0x9b, 0xe9, 0x45, 0xb8, 0x31, 0x80,
     0xca, 0x2e, 0xe2, 0x20, 0x5c, 0xed, 0xb5, 0xa6},
    {0xac, 0x5d, 0xbb, 0x56, 0x42, 0x89, 0x92, 0x17,
     0x25, 0x86, 0x8d, 0xa6, 0xea, 0xdc, 0x4a, 0x69},
    {0xa6, 0xf2, 0x84, 0x6c, 0x85, 0xe1, 0x9b, 0x52,
     0x97, 0x7d, 0xd5, 0x28, 0x11, 0x4b, 0x4, 0x30},
    {0xc2, 0xb8, 0x72, 0x5b, 0x13, 0xb3, 0x19, 0x6b,
     0x14, 0x4, 0xe6, 0xdf, 0xd3, 0x44, 0xca, 0x10},
    {0xcd, 0x6e, 0x22, 0x21, 0x35, 0x8e, 0x5b, 0xf4,
     0xd0, 0x86, 0x48, 0xb9, 0x0, 0x5f, 0xf5, 0xa},
    {0x36, 0x6f, 0x3, 0x9c, 0x1d, 0x48, 0x9e, 0xb3,
     0x82, 0x57, 0x2d, 0xc8, 0xa, 0x8a, 0x20, 0xd9},
    {0x3, 0xe9, 0x46, 0xd7, 0x8d, 0xba, 0x1d, 0x6a,
     0x93, 0xc6, 0x10, 0xd2, 0x9b, 0x98, 0x1e, 0x7f},
    {0x71, 0x63, 0xb2, 0xd1, 0x81, 0xf1, 0xa5, 0x2d,
     0x38, 0x9f, 0x45, 0x21, 0x9b, 0xc1, 0x65, 0xd5},
    {0x5d, 0x12, 0xcd, 0xc5, 0x9d, 0x88, 0x5a, 0x50,
     0xde, 0x58, 0xa3, 0x66, 0x40, 0x3a, 0xc0, 0xc7},
    {0xa1, 0x7, 0x87, 0x31, 0xdc, 0xa7, 0x1c, 0xd1,
     0x89, 0xa0, 0x16, 0x7, 0x2b, 0x9, 0x4a, 0x8e},
    {0xa0, 0xb3, 0x91, 0xa8, 0x61, 0x4d, 0x80, 0xe5,
     0xce, 0x5a, 0x5c, 0x1f, 0xf9, 0xa6, 0x5c, 0xb8},
    {0xfd, 0x45, 0x86, 0xf4, 0x2c, 0x1e, 0xf8, 0xb,
     0xe0, 0xa0, 0x0, 0x3f, 0x78, 0xe2, 0x75, 0x12},
    {0x71, 0xcb, 0x1, 0x4f, 0x85, 0xb5, 0x37, 0x4e,
     0xdc, 0x5a, 0xce, 0xb, 0x1f, 0xac, 0x6, 0xf2},
    {0xfe, 0x1, 0x1e, 0x96, 0xcc, 0x8f, 0x7e, 0x8d,
     0xa3, 0x32, 0x28, 0xdc, 0xa4, 0x9e, 0xe1, 0x50},
    {0xe7, 0x28, 0x1, 0xf4, 0x3a, 0x57, 0x7f, 0x3c,
     0x2b, 0x1e, 0x54, 0xcb, 0xde, 0xbb, 0x77, 0x21},
    {0xf4, 0x24, 0xeb, 0x12, 0xee, 0xdb, 0x3f, 0x22,
     0x31, 0xa0, 0xe0, 0x36, 0x19, 0xc4, 0xf5, 0x32},
    {0xd4, 0x4b, 0x81, 0x2a, 0x2a, 0xf8, 0x64, 0x6c,
     0x8d, 0x95, 0xe1, 0x5e, 0x35, 0x4, 0x2c, 0x90},
    {0x6e, 0x8, 0x58, 0x6d, 0x4a, 0xa5, 0x2e, 0xdb,
     0xd, 0x85, 0x66, 0xbb, 0x44, 0x60, 0x1c, 0xfc}};
uint_8t AESIterationPlaintextBlock[N_BLOCK];
uint_8t AESIterationCiphertextBlock[N_BLOCK];
uint_8t AESIterationPlaintextBlockConst1[5] = {0x01, 0x00, 0x00, 0x00, 0x00};
uint_8t AESIterationPlaintextBlockConst2 = 0x00;
uint_8t direction = 0x00; // let direction flag be 0x00 -> uplink
uint_8t deviceAdress[4] = {0x30, 0x31, 0x32, 0x33};
uint_8t frameCount[4] = {0x00, 0x00, 0x00, 0x01}; // number of communication frames in current direction, let it be 1
length_type AESKeyLength = 128;
aes_context AESContext;
uint_8t zeroPaddingByte = 0x00;
boolean encryptionFinished = false;
uint8_t btn_prev_state;
int plaintextIndex = 0;
long t1 = 0;

void payloadEncryption()
{
  // set AES key and initialize context
  aes_set_key(AppSKey, AESKeyLength, &AESContext);
  // block size = 16bytes -> number of blocks -> ceil((payload size in bytes) / 16)
  int payloadTextBytes = sizeof(payloadText[plaintextIndex]);
  int blockNumbers = (payloadTextBytes + 16 - 1) / 16; // https://stackoverflow.com/questions/2745074/fast-ceiling-of-an-integer-division-in-c-c
  uint_8t payload[blockNumbers * N_BLOCK];
  memcpy(payload, payloadText[plaintextIndex], payloadTextBytes);
  // add zero padding if necessary
  if (payloadTextBytes % N_BLOCK != 0)
  {
    int paddingBytesNeeded = N_BLOCK - payloadTextBytes % N_BLOCK;
    for (int i = 0; i < paddingBytesNeeded; i++)
    {
      memcpy(payload + payloadTextBytes + i, &zeroPaddingByte, 1);
    }
  }
  uint_8t encryptedPayload[N_BLOCK * blockNumbers];
  for (int i = 1; i <= blockNumbers; i++)
  {
    uint_8t byteCastedi = i;
    // AESIterationPlaintextBlock = AESIterationPlaintextBlockConst1 || direction || deviceAdress || frameCount || AESIterationPlaintextBlockConst2 || byteCastedi = 16 bytes
    memcpy(AESIterationPlaintextBlock, AESIterationPlaintextBlockConst1, 5);
    memcpy(AESIterationPlaintextBlock + 5, &direction, 1);
    memcpy(AESIterationPlaintextBlock + 6, deviceAdress, 4);
    memcpy(AESIterationPlaintextBlock + 10, frameCount, 4);
    memcpy(AESIterationPlaintextBlock + 14, &AESIterationPlaintextBlockConst2, 1);
    memcpy(AESIterationPlaintextBlock + 15, &byteCastedi, 1);
    digitalWrite(triggerPin, HIGH);
    aes_encrypt(AESIterationPlaintextBlock, AESIterationCiphertextBlock, &AESContext);
    digitalWrite(triggerPin, LOW);
    // XOR current payload block and AESIterationCiphertextBlock
    uint_8t currentPayloadBlock[N_BLOCK];
    memcpy(currentPayloadBlock, payload + (i - 1) * N_BLOCK, N_BLOCK);
    xor_block(currentPayloadBlock, AESIterationCiphertextBlock);
    // copy to encryptedPayload block
    memcpy(encryptedPayload + (i - 1) * N_BLOCK, currentPayloadBlock, N_BLOCK);
  }
}
void setup()
{
  pinMode(triggerPin, OUTPUT);
  digitalWrite(triggerPin, LOW);
  pinMode(buttonPin, INPUT_PULLUP);
  // put your setup code here, to run once:
  Serial.begin(115200);
}
void loop()
{
  uint8_t btn_current_state = digitalRead(buttonPin);
  if (btn_current_state == LOW && (millis() - t1 > 2000))
  {
    payloadEncryption();
    plaintextIndex = (plaintextIndex + 1) % payloadTextNumber;
    t1 = millis();
  }
}